[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom shiny import render \nfrom shinyswatch import theme\nfrom shiny import reactive\n\n\n# loading the dataset\npenguins_df = load_penguins()\n\n# Giving the Title\nui.page_opts(title = \"Mo and Penguins\", fillable = True, theme = theme.superhero)\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\"selected_attribute\", \"Select Attributes\", \n        [\"bill_length_mm\", \"bill_depth_mm\",\n         \"flipper_length_mm\", \"body_mass_g\"])\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 10)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 5, 50, 10)\n    ui.input_checkbox_group(\"selected_species_list\", \"Select Species\", \n                                [\"Adelie\", \"Gentoo\", \"Chinstrap\"], \n                                selected=[\"Adelie\", \"Gentoo\"], inline=True)\n\n    ui.hr(),\n    ui.a(\"GitHub\", href=\"https://github.com/MahammadHajiyev2024/cintel-02-data\", target=\"_blank\")\n    \n# This is for my bonus task where I added dynamic text output\n    ui.h3(\"Additional Information about Selected Species\")\n    @render.text\n    def selected_species_info():\n        selected_species = input.selected_species_list()\n        count = penguins_df[penguins_df[\"species\"].isin(selected_species)].shape[0] \n        return f\"Displaying data for {', '.join(selected_species)} with {count} penguins.\"\n        \n# Main Content Layout\nwith ui.layout_columns():\n    # Data Table\n    with ui.card():   \n        ui.card_header(\"Data Table for Penguins Dataset\")\n\n        @render.data_frame\n        def penguins_table():\n            return render.DataTable(filtered_data())\n            \n    #Data Grid\n    with ui.card():\n        ui.card_header(\"Data Grid for Penguins\")\n\n        @render.data_frame\n        def penguins_grid():\n            return render.DataGrid(filtered_data())\n                  \n\nwith ui.layout_columns():\n    # Seaborn Histogram\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram: Selected Attribute\")\n\n        # Render Seaborn histogram\n        @render.plot\n        def seaborn_histogram():\n            selected_attribute = input.selected_attribute()\n            bin_count = input.seaborn_bin_count()\n\n            fig, ax = plt.subplots(figsize=(10, 6))\n            sns.histplot(\n                data=filtered_data(),\n                x=selected_attribute,\n                hue=\"species\",\n                bins=bin_count,\n                multiple=\"stack\",\n                ax=ax\n            )\n            ax.set_title(f\"Seaborn Histogram of {selected_attribute} by Species\")\n            ax.set_xlabel(f\"{selected_attribute} (mm)\")\n            ax.set_ylabel(\"Count\")\n            return fig\n\n    with ui.card(full_screen=True):\n        # Plotly Scatterplot\n        ui.card_header(\"Plotly Scatterplot: Flipper Length vs Bill Length\")\n\n        # Render Plotly scatterplot\n        @render_plotly\n        def plotly_scatterplot():\n            selected_species = input.selected_species_list()\n            filtered_df = penguins_df[penguins_df[\"species\"].isin(selected_species)]\n            fig = px.scatter(\n                filtered_df,\n                x=\"flipper_length_mm\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                title=\"Scatterplot of Flipper Length vs Bill Length by Species\",\n                labels={\n                    \"flipper_length_mm\": \"Flipper Length (mm)\",\n                    \"bill_length_mm\": \"Bill Length (mm)\"\n                }\n            )\n            return fig\n\n\n    with ui.card(full_screen=True):\n        # Plotly Histogram\n        ui.card_header(\"Plotly Histogram: Body Mass by Species\")\n        @render_plotly\n        def plotly_histogram():  \n            fig = px.histogram(penguins_df, x=\"body_mass_g\", color=\"species\", title=\"Penguin Body Mass by Species\")\n            return fig\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    if selected_species:\n        return penguins_df[penguins_df['species'].isin(selected_species)]\n    else: \n        return penguins_df\n    return penguins_df\n", "type": "text"}]